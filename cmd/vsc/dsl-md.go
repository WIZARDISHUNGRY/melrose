package main

import (
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/emicklei/melrose/dsl"
)

var tmpl = template.Must(template.New("dsl").Parse(
	`---
title: Melrose Language
---

## Creation functions
{{range .Core}}
### {{.Title}}<a name="{{.Anchor}}"/>

{{.Description}}
{{ range .Examples }}
	{{ . }}
{{ end }}{{end}}
## Composition functions
{{range .Composer}}
### {{.Title}}<a name="{{.Anchor}}"/>

{{.Description}}
{{ range .Examples }}
	{{ . }}
{{ end }}{{end}}
## Audio control functions
{{range .Audio}}
### {{.Title}}<a name="{{.Anchor}}"/>

{{.Description}}
{{ range .Examples }}
	{{ . }}
{{ end }}{{end}}

##### generated by dsl-md.go
`))

type DocumentedFunction struct {
	Title       string
	Description string
	Examples    []string
	Anchor      string
}

type GroupedFunctions struct {
	Core     []DocumentedFunction
	Composer []DocumentedFunction
	Audio    []DocumentedFunction
}

func dslmarkdown() {
	varstore := dsl.NewVariableStore()
	gf := GroupedFunctions{}
	for k, each := range dsl.EvalFunctions(varstore) {
		df := DocumentedFunction{
			Title:       each.Title,
			Description: each.Description,
			Examples:    strings.Split(each.Samples, "\n"),
			Anchor:      k,
		}
		if each.ControlsAudio {
			gf.Audio = append(gf.Audio, df)
		}
		if each.IsCore {
			gf.Core = append(gf.Core, df)
		}
		if each.IsComposer {
			gf.Composer = append(gf.Composer, df)
		}
	}
	out, err := os.Create("../../docs/dsl.md")
	checkErr(err)
	defer out.Close()
	err = tmpl.Execute(out, gf)
	checkErr(err)
}

func checkErr(err error) {
	if err != nil {
		log.Fatal(err)
	}
}
